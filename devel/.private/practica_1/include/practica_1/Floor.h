// Generated by gencpp from file practica_1/Floor.msg
// DO NOT EDIT!


#ifndef PRACTICA_1_MESSAGE_FLOOR_H
#define PRACTICA_1_MESSAGE_FLOOR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace practica_1
{
template <class ContainerAllocator>
struct Floor_
{
  typedef Floor_<ContainerAllocator> Type;

  Floor_()
    : pose_caja()
    , name()
    , tamaño()  {
    }
  Floor_(const ContainerAllocator& _alloc)
    : pose_caja(_alloc)
    , name(_alloc)
    , tamaño(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_caja_type;
  _pose_caja_type pose_caja;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _tamaño_type;
  _tamaño_type tamaño;





  typedef boost::shared_ptr< ::practica_1::Floor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::practica_1::Floor_<ContainerAllocator> const> ConstPtr;

}; // struct Floor_

typedef ::practica_1::Floor_<std::allocator<void> > Floor;

typedef boost::shared_ptr< ::practica_1::Floor > FloorPtr;
typedef boost::shared_ptr< ::practica_1::Floor const> FloorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::practica_1::Floor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::practica_1::Floor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::practica_1::Floor_<ContainerAllocator1> & lhs, const ::practica_1::Floor_<ContainerAllocator2> & rhs)
{
  return lhs.pose_caja == rhs.pose_caja &&
    lhs.name == rhs.name &&
    lhs.tamaño == rhs.tamaño;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::practica_1::Floor_<ContainerAllocator1> & lhs, const ::practica_1::Floor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace practica_1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::practica_1::Floor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::practica_1::Floor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::practica_1::Floor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::practica_1::Floor_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::practica_1::Floor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::practica_1::Floor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::practica_1::Floor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a6d6ac6783852c70a735b1df3828bbfa";
  }

  static const char* value(const ::practica_1::Floor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa6d6ac6783852c70ULL;
  static const uint64_t static_value2 = 0xa735b1df3828bbfaULL;
};

template<class ContainerAllocator>
struct DataType< ::practica_1::Floor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "practica_1/Floor";
  }

  static const char* value(const ::practica_1::Floor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::practica_1::Floor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Pose pose_caja\n"
"string name\n"
"float64[] tamaño\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::practica_1::Floor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::practica_1::Floor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose_caja);
      stream.next(m.name);
      stream.next(m.tamaño);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Floor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::practica_1::Floor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::practica_1::Floor_<ContainerAllocator>& v)
  {
    s << indent << "pose_caja: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose_caja);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "tamaño[]" << std::endl;
    for (size_t i = 0; i < v.tamaño.size(); ++i)
    {
      s << indent << "  tamaño[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tamaño[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PRACTICA_1_MESSAGE_FLOOR_H
